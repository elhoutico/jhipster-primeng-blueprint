<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<div class="row justify-content-center">
    <div class="col-8">
        <form name="editForm" role="form" novalidate (ngSubmit)="save()" [formGroup]="editForm">
            <h2 id="<%= jhiPrefixDashed %>-<%= entityFileName %>-heading" jhiTranslate="<%= i18nKeyPrefix %>.home.createOrEditLabel">Create or edit a <%= entityClassHumanized %></h2>
            <div class="form-grid">
<%_ for (idx in fields) {
    const fieldName = fields[idx].fieldName;
    const fieldNameCapitalized = fields[idx].fieldNameCapitalized;
    const fieldNameHumanized = fields[idx].fieldNameHumanized;
    const fieldType = fields[idx].fieldType;
    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    let fieldInputType = 'text';
    let ngModelOption = '';
    const translationKey = (isAutoIncrement && fields[idx].partOfId) ? 'global.field.id' : `${i18nKeyPrefix}.${fieldName}`;
    if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal', 'Duration'].includes(fieldType)) {
        fieldInputType = 'number';
    } else if (fieldType === 'LocalDate') {
        fieldInputType = 'date';
    } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) {
        fieldInputType = 'datetime-local';
    } else if (fieldType === 'Boolean') {
        fieldInputType = 'checkbox';
    } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') {
        fieldInputType = 'hidden';
    }
_%>
<%_ if (isAutoIncrement && fields[idx].partOfId) { _%>
                <ng-container *ngIf="editForm.get('id')!.value">
<%_ } _%>
<%= (isAutoIncrement && fields[idx].partOfId) ? '    ' : '' -%>
            <div class="form-group">
                <label class="form-control-label" jhiTranslate="<%= translationKey %>" for="field_<%= fieldName %>"<% if (fields[idx].javadoc) { if (enableTranslation) { %> [pTooltip]="'<%= i18nKeyPrefix %>.help.<%= fieldName %>' | translate"<% } else { %> pTooltip="<%= fields[idx].javadoc %>"<% } } %>><%= fieldNameHumanized %></label>
    <%_ if (fields[idx].fieldIsEnum) { _%>
                <p-dropdown [options]="<%= fields[idx].fieldName %>Options" name="<%= fieldName %>" formControlName="<%= fieldName %>" id="field_<%= fieldName %>" placeholder="Choose"<%_ if(!fields[idx].fieldValidateRules || !fields[idx].fieldValidateRules.includes('required')){ %> [showClear]="true"<%_ } _%><% if (fields[idx].partOfId) { %> [readonly]="edit"<% } %>>
                    <ng-template let-<%= fields[idx].fieldName %> pTemplate="item">{{'<%= `${angularAppName}.${fields[idx].fieldType}` %>.' + <%= fields[idx].fieldName %>.label | translate}}</ng-template>
                </p-dropdown>
    <%_ } else { _%>
        <%_ if (fieldType === 'LocalDate') { _%>
                <p-calendar class="form-control" id="field_<%= fieldName %>" formControlName="<%= fieldName %>" [showIcon]="true"<% if (fields[idx].partOfId) { %> [disabled]="edit"<% } %>></p-calendar>
        <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                <p-calendar class="form-control" id="field_<%= fieldName %>" formControlName="<%= fieldName %>" [showIcon]="true" [showTime]="true"<% if (fields[idx].partOfId) { %> [disabled]="edit"<% } %>></p-calendar>
        <%_ } else if (fieldTypeBlobContent === 'text') { _%>
                <textarea class="form-control" pInputTextarea name="<%= fieldName %>" id="field_<%= fieldName %>"
                          formControlName="<%= fieldName %>"<% if (fields[idx].partOfId) { %> [readonly]="edit"<% } %>></textarea>
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                <p-fileUpload name="<%= fieldName %>" id="field_<%= fieldName %>" [showUploadButton]="false" (onSelect)="onFileSelect($event, '<%= fieldName %>')"<% if (fieldTypeBlobContent === 'image') { %> accept="image/*"<% } %>
                              (onClear)="onFileRemove($event, '<%= fieldName %>')" (onRemove)="onFileRemove($event, '<%= fieldName %>')" [files]="<%= fieldName %>File?[<%= fieldName %>File]:[]"></p-fileUpload>
        <%_ } else if (fieldType === 'Boolean') { _%>
                <p-inputSwitch name="<%= fieldName %>" id="field_<%= fieldName %>" formControlName="<%= fieldName %>"<% if (fields[idx].partOfId) { %> [readonly]="edit"<% } %>></p-inputSwitch>
        <%_ } else if (isAutoIncrement && fields[idx].partOfId) { _%>
                    <input class="form-control" pInputText type="<%= fieldInputType %>" name="<%= fieldName %>" id="field_<%= fieldName %>" formControlName="<%= fieldName %>" readonly/>
        <%_ } else { _%>
                <input class="form-control"class="form-control" pInputText type="<%= fieldInputType %>" name="<%= fieldName %>" id="field_<%= fieldName %>" formControlName="<%= fieldName %>"<% if (fields[idx].partOfId) { %> [readonly]="edit"<% } %>/>
        <%_ } _%>
    <%_ } _%>
<%= (isAutoIncrement && fields[idx].partOfId) ? '    ' : '' -%>
                <div class="validation-messages">
    <%_ if (fields[idx].fieldValidate === true) { _%>
                    <ng-container *ngIf="editForm.get('<%= fieldName %>')!.invalid && (editForm.get('<%= fieldName %>')!.dirty || editForm.get('<%= fieldName %>')!.touched)">
        <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
                        <p-message severity="error"
                                   *ngIf="editForm.get('<%= fieldName %>')!.errors!.required" [text]="'entity.validation.required' | translate">
                        </p-message>
        <%_ } _%>
        <%_ if (fields[idx].fieldValidateRules.includes('minlength')) { _%>
                        <p-message severity="error"
                               *ngIf="editForm.get('<%= fieldName %>')!.errors!.minlength" [text]="'entity.validation.minlength' | translate : { min: <%= fields[idx].fieldValidateRulesMinlength %> }">
                        </p-message>
        <%_ } _%>
        <%_ if (fields[idx].fieldValidateRules.includes('maxlength')) { _%>
                        <p-message severity="error"
                               *ngIf="editForm.get('<%= fieldName %>')!.errors!.maxlength" [text]="'entity.validation.maxlength' | translate : { max: <%= fields[idx].fieldValidateRulesMaxlength %> }">
                        </p-message>
        <%_ } _%>
        <%_ if (fields[idx].fieldValidateRules.includes('min')) { _%>
                        <p-message severity="error"
                               *ngIf="editForm.get('<%= fieldName %>')!.errors!.min" [text]="'entity.validation.min' | translate : { min: <%= fields[idx].fieldValidateRulesMin %> }">
                        </p-message>
        <%_ } _%>
        <%_ if (fields[idx].fieldValidateRules.includes('max')) { _%>
                        <p-message severity="error"
                               *ngIf="editForm.get('<%= fieldName %>')!.errors!.max" [text]="'entity.validation.max' | translate : { max: <%= fields[idx].fieldValidateRulesMax %> }">
                        </p-message>
        <%_ } _%>
        <%_ if (fields[idx].fieldValidateRules.includes('minbytes')) { _%>
                    <p-message severity="error"
                           *ngIf="editForm.get('<%= fieldName %>')!.errors!.minbytes" [text]="'entity.validation.minbytes' | translate : { min: <%= fields[idx].fieldValidateRulesMinbytes %> }">
                        </p-message>
        <%_ } _%>
        <%_ if (fields[idx].fieldValidateRules.includes('maxbytes')) { _%>
                        <p-message severity="error"
                               *ngIf="editForm.get('<%= fieldName %>')!.errors!.maxbytes" [text]="'entity.validation.maxbytes' | translate : { max: <%= fields[idx].fieldValidateRulesMaxbytes %> }">
                        </p-message>
        <%_ } _%>
        <%_ if (fields[idx].fieldValidateRules.includes('pattern')) { _%>
                        <p-message severity="error"
                               *ngIf="editForm.get('<%= fieldName %>')!.errors!.pattern" [text]="'entity.validation.pattern' | translate : { pattern: '<%= fieldNameHumanized %>' }">
                        </p-message>
        <%_ } _%>
        <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal', 'Duration'].includes(fieldType)) { _%>
                        <p-message severity="error"
                            [hidden]="!editForm.get('<%= fieldName %>')!.errors!.number" [text]="'entity.validation.number' | translate">
                        </p-message>
        <%_ } _%>
        <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                        <p-message severity="error"
                            [hidden]="!editForm.get('<%= fieldName %>')!.errors!.ZonedDateTimelocal" [text]="'entity.validation.ZonedDateTimelocal' | translate">
                        </p-message>
        <%_ } _%>
                    </ng-container>
    <%_ } _%>
<%= (isAutoIncrement && fields[idx].partOfId) ? '    ' : '' -%>
                </div>
            </div>
<%_ if (isAutoIncrement && fields[idx].partOfId) { _%>
                </ng-container>
<%_ } _%>
<%_ } _%>
<%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const ownerSide = relationships[idx].ownerSide;
    const otherEntityName = relationships[idx].otherEntityName;
    const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
    const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
    const relationshipName = relationships[idx].relationshipName;
    const relationshipNameHumanized = relationships[idx].relationshipNameHumanized;
    const relationshipFieldName = relationships[idx].relationshipFieldName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
    const otherEntityField = relationships[idx].otherEntityField;
    const otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized;
    const relationshipRequired = relationships[idx].relationshipRequired;
    const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
        <%_ if (dto === 'no') { _%>
                <label jhiTranslate="<%= translationKey %>" for="field_<%= relationshipName %>"><%= relationshipNameHumanized %></label>
                <p-dropdown id="field_<%= relationshipName %>" name="<%= relationshipName %>" [options]="<%= relationshipName %>Options" formControlName="<%= relationshipName %>"<% if (relationships[idx].partOfId) { %> [readonly]="edit"<% } %><% if(relationships[idx].pagination !== 'no') { %>
                            [virtualScroll]="true" [lazy]="true" [rows]="10" (onLazyLoad)="on<%= relationshipNameCapitalized %>LazyLoadEvent($event)"<% } %> [lazyLoadOnInit]="true" [filter]="true"<% if (relationships[idx].pagination != 'no') { %> [filterValue]="<%= relationships[idx].relationshipName %>FilterValue"<% } %>
                            placeholder="Choose" optionLabel="<%=otherEntityField %>"<%- relationshipRequired?'':' [showClear]="true"' %>></p-dropdown>
                <div class="validation-messages">
            <%_ if (relationshipRequired) { _%>
                    <ng-container *ngIf="editForm.get('<%= relationshipName %>')!.invalid && (editForm.get('<%= relationshipName %>')!.dirty || editForm.get('<%= relationshipName %>')!.touched)">
                        <p-message severity="error"
                                   *ngIf="editForm.get('<%= relationshipName %>')!.errors!.required" [text]="'entity.validation.required' | translate">
                        </p-message>
                    </ng-container>
            <%_ } _%>
                </div>
        <%_ } else { _%>
            <%_ relationships[idx].pkData.forEach(pk => { _%>
                <label jhiTranslate="<%= `${i18nKeyPrefix}.${pk.formName}` %>" for="field_<%= pk.formName %>"><%= _.startCase(pk.formName) %></label>
                <p-dropdown id="field_<%= pk.formName %>" name="<%= pk.formName %>" [options]="<%= `${pk.formName}Options` %>" formControlName="<%= relationshipName %><%= pk.nameCapitalized %>"<% if (relationships[idx].partOfId) { %> [readonly]="edit"<% } %><% if(relationships[idx].pagination !== 'no') { %>
                            [virtualScroll]="true" [lazy]="true" [rows]="10" (onLazyLoad)="on<%= _.upperFirst(pk.formName) %>LazyLoadEvent($event)"<% } %> [lazyLoadOnInit]="true" [filter]="true"<% if (pk.entity.pagination != 'no') { %> [filterValue]="<%= pk.formName %>FilterValue"<% } %>
                            placeholder="Choose" optionLabel="<%= pk.otherEntityField %>" optionValue="<%= pk.field.fieldName %>"<%- relationshipRequired?'':' [showClear]="true"' %>></p-dropdown>
                <div class="validation-messages">
                <%_ if (relationshipRequired) { _%>
                    <ng-container *ngIf="editForm.get('<%= relationshipName %><%= pk.nameCapitalized %>')!.invalid && (editForm.get('<%= relationshipName %><%= pk.nameCapitalized %>')!.dirty || editForm.get('<%= relationshipName %><%= pk.nameCapitalized %>')!.touched)">
                        <p-message severity="error"
                                   *ngIf="editForm.get('<%= relationshipName %><%= pk.nameCapitalized %>')!.errors!.required" [text]="'entity.validation.required' | translate">
                        </p-message>
                    </ng-container>
                <%_ } _%>
                </div>
            <%_ }); _%>
        <%_ } _%>
    <%_ } else if (relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) { _%>
                <label jhiTranslate="<%= translationKey %>" for="field_<%= relationshipFieldNamePlural %>"><%= relationshipNameHumanized %></label>
                <p-multiSelect id="field_<%= relationshipFieldNamePlural %>" name="<%= relationshipFieldNamePlural %>" formControlName="<%=relationshipFieldNamePlural %>"<% if(relationships[idx].pagination !== 'no') { %>
                               [virtualScroll]="true" [lazy]="true" [rows]="10" (onLazyLoad)="on<%= relationshipNameCapitalized %>LazyLoadEvent($event)"<% } %>
                    [options]="<%= relationshipName %>Options" optionLabel="<%=otherEntityField %>">
                </p-multiSelect>
                <div class="validation-messages">
        <%_ if (relationshipRequired) { _%>
                    <ng-container *ngIf="editForm.get('<%=relationshipFieldNamePlural %>')!.invalid && (editForm.get('<%=relationshipFieldNamePlural %>')!.dirty || editForm.get('<%=relationshipFieldNamePlural %>')!.touched)">
                        <p-message severity="error"
                                   *ngIf="editForm.get('<%=relationshipFieldNamePlural %>')!.errors!.required" [text]="'entity.validation.required' | translate">
                        </p-message>
                    </ng-container>
        <%_ } _%>
                </div>
    <%_ } _%>
<%_ } _%>
            </div>

            <div>
                <br />
                <button pButton type="button" id="cancel-save" icon="pi pi-ban" class="ui-button-secondary" (click)="previousState()" [label]="'entity.action.cancel' | translate" class="btn btn-secondary"></button>
                <button pButton type="submit" id="save-entity" icon="pi pi-save" [disabled]="editForm.invalid || isSaving" [label]="'entity.action.save' | translate" class="btn btn-primary"></button>
            </div>
        </form>
    </div>
</div>